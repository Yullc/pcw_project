<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper
        PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
        "http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<mapper namespace="org.example.repository.MatchParticipantRepository">

    <insert id="join">
        INSERT INTO match_participant (matchId, memberId,  type)
        VALUES (#{matchId}, #{memberId}, '풋살')
    </insert>

    <insert id="scJoin">
        INSERT INTO match_participant (matchId, memberId, position, type)
        VALUES (#{matchId}, #{memberId}, #{position}, '축구')
    </insert>

    <select id="isAlreadyJoined" resultType="int">
        SELECT COUNT(*) FROM match_participant
        WHERE matchId = #{matchId} AND memberId = #{memberId}
    </select>

    <select id="getParticipants" resultType="org.example.vo.Member">
        SELECT
        m.id AS id,
        mp.position,
        m.nickName,
        m.rank,
        m.manner
        FROM match_participant mp
        JOIN member m ON mp.memberId = m.id
        WHERE mp.matchId = #{matchId}
    </select>


    <delete id="cancelJoin">
        DELETE FROM match_participant
        WHERE matchId = #{matchId}
          AND memberId = #{memberId}
    </delete>

    <update id="updatePosition">
        UPDATE match_participant
        SET position = #{position}
        WHERE matchId = #{id}
          AND memberId = #{memberId}
    </update>

    <select id="getNextMatchForMember" resultType="org.example.vo.Article">
        (
            SELECT fa.id, fa.title, fa.playDate, fs.img, fs.stadiumName AS stadium, '풋살' AS type
            FROM ftArticle fa
                     JOIN match_participant mp ON fa.id = mp.matchId
                     JOIN football_stadium fs ON fa.fsId = fs.id
            WHERE mp.memberId = #{memberId}
              AND fa.playDate > NOW()
        )
        UNION
        (
            SELECT sa.id, sa.title, sa.playDate, ss.img, ss.stadiumName AS stadium, '축구' AS type
            FROM scArticle sa
                     JOIN match_participant mp ON sa.id = mp.matchId
                     JOIN soccer_stadium ss ON sa.ssId = ss.id
            WHERE mp.memberId = #{memberId}
              AND sa.playDate > NOW()
        )
        ORDER BY playDate ASC
            LIMIT 1
    </select>


    <select id="getParticipantsForMatchesInOneHour" resultType="map">
        SELECT DISTINCT m.phoneNumber, matches.stadium
        FROM match_participant mp
                 INNER JOIN member m ON mp.memberId = m.id
                 INNER JOIN (
            SELECT id, playDate, stadium, '풋살' AS type
            FROM ftArticle
            WHERE playDate BETWEEN DATE_ADD(NOW(), INTERVAL 59 MINUTE)
                      AND DATE_ADD(NOW(), INTERVAL 61 MINUTE)
            UNION
            SELECT id, playDate, stadium, '축구' AS type
            FROM scArticle
            WHERE playDate BETWEEN DATE_ADD(NOW(), INTERVAL 59 MINUTE)
                      AND DATE_ADD(NOW(), INTERVAL 61 MINUTE)
        ) AS matches ON mp.matchId = matches.id AND mp.type = matches.type
        WHERE mp.type IN ('풋살', '축구');
    </select>

    <!-- ✅ 팀 참가 신청 -->
    <insert id="joinByTeam">
        INSERT INTO match_participant
        SET regDate = NOW(),
        matchId = #{matchId},
            teamId = #{teamId},
            type = #{type}
    </insert>


    <!-- ✅ 팀이 이미 참가했는지 확인 -->
    <select id="isTeamAlreadyJoined" resultType="int">
        SELECT COUNT(*) FROM match_participant
        WHERE matchId = #{matchId}
          AND teamId = #{teamId}
    </select>


    <!-- ✅ 매치에 신청한 팀 수 -->
    <select id="getJoinedTeamCount" resultType="int">
        SELECT COUNT(*)
        FROM match_participant
        WHERE matchId = #{matchId}
    </select>


    <!-- ✅ 매치에 참가한 팀 정보 가져오기 -->
    <select id="getJoinedTeams" resultType="org.example.vo.Team">
        SELECT t.*
        FROM match_participant mp
                 INNER JOIN team t ON mp.teamId = t.id
        WHERE mp.matchId = #{matchId}
    </select>

    <select id="getTeamJoinCount" parameterType="map" resultType="int">
        SELECT COUNT(*)
        FROM match_participant mp
                 JOIN member m ON mp.memberId = m.id
        WHERE mp.matchId = #{matchId}
          AND m.teamNm = #{teamNm}
    </select>

    <select id="getJoinedTeamList" parameterType="int" resultType="map">
        SELECT
            m.teamNm ,
            t.teamLeader ,
            ROUND(AVG(m.rank)) AS avgRank
        FROM
            match_participant mp
                JOIN
            member m ON mp.memberId = m.id
                JOIN
            team t ON m.teamNm = t.teamName
        WHERE
            mp.matchId = #{matchId}
          AND m.teamNm IS NOT NULL
        GROUP BY
            m.teamNm, t.teamLeader
    </select>

    <insert id="teamJoin">
        INSERT INTO match_participant
            (matchId, memberId, teamId, teamNm, type, regDate)
        VALUES
            (#{matchId}, #{memberId}, #{teamId},#{teamNm}, '풋살', NOW())
    </insert>

    <insert id="teamScJoin">
        INSERT INTO match_participant
            (matchId, memberId, teamId, teamNm, type, regDate)
        VALUES
            (#{matchId}, #{memberId}, #{teamId},#{teamNm}, '축구', NOW())
    </insert>

    <delete id="cancelTeamJoin">
        DELETE FROM match_participant
        WHERE matchId = #{matchId}
          AND teamNm = #{teamNm}
    </delete>


    <update id="getParticipantsWithEvaluation">
        UPDATE match_participant
        SET hasEvaluated = TRUE
        WHERE matchId = #{matchId} AND memberId = #{memberId}
    </update>

    <select id="hasUserEvaluated" resultType="boolean">
        SELECT EXISTS (
            SELECT 1 FROM match_evaluation
            WHERE matchId = #{matchId}
              AND memberId = #{memberId}
              AND evaluatorId = #{evaluatorId}
              AND hasEvaluated = TRUE
        )
    </select>

    <insert id="markEvaluationComplete">
        INSERT INTO match_evaluation (matchId, memberId, evaluatorId, hasEvaluated)
        VALUES (#{matchId}, #{memberId}, #{evaluatorId}, TRUE)
            ON DUPLICATE KEY UPDATE hasEvaluated = TRUE
    </insert>


</mapper>
