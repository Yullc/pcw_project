package org.example.service;

import org.example.vo.WeatherDto;
import org.json.JSONArray;
import org.json.JSONObject;
import org.springframework.stereotype.Service;
import org.springframework.web.client.HttpClientErrorException;
import org.springframework.web.client.RestTemplate;

import java.time.LocalDate;
import java.time.LocalDateTime;
import java.time.format.DateTimeFormatter;
import java.util.ArrayList;
import java.util.List;

@Service
public class WeatherService {
    private final String API_KEY = "acd92a9832f723c9fd085366c7196fd5";

    public List<WeatherDto> getWeatherByAreaAndDate(String area, LocalDate date) {
        System.out.println("üõ∞Ô∏è WeatherService ÏßÑÏûÖ");
        System.out.println("üéØ Í≤ΩÍ∏∞ ÎÇ†Ïßú (playDate): " + date);  // dateÎäî LocalDate

        String cityName = "Seoul"; // ÏùºÎã® ÏÑúÏö∏Îßå Í≥†Ï†ï

        String url = String.format(
                "https://api.openweathermap.org/data/2.5/forecast?q=%s,KR&appid=%s&units=metric",
                cityName, API_KEY
        );

        RestTemplate restTemplate = new RestTemplate();
        List<WeatherDto> weatherList = new ArrayList<>();

        try {
            String response = restTemplate.getForObject(url, String.class);
            JSONObject json = new JSONObject(response);
            JSONArray list = json.getJSONArray("list");

            for (int i = 0; i < list.length(); i++) {
                JSONObject item = list.getJSONObject(i);
                String dt_txt = item.getString("dt_txt");
                LocalDateTime dateTime = LocalDateTime.parse(dt_txt, DateTimeFormatter.ofPattern("yyyy-MM-dd HH:mm:ss"));

                if (dateTime.toLocalDate().equals(date)) {
                    double temp = item.getJSONObject("main").getDouble("temp");
                    String description = item.getJSONArray("weather").getJSONObject(0).getString("description");
                    String iconCode = item.getJSONArray("weather").getJSONObject(0).getString("icon");
                    String iconUrl = "https://openweathermap.org/img/wn/" + iconCode + "@2x.png";

                    System.out.printf("üå§Ô∏è %s ‚Üí %.1f¬∞C, %s (%s)%n", dt_txt, temp, description, iconUrl);  // Î°úÍ∑∏!

                    weatherList.add(new WeatherDto(description, temp, iconUrl, dt_txt));
                }
            }


        } catch (HttpClientErrorException e) {
            System.err.println("üåßÔ∏è OpenWeather API Ïò§Î•ò: " + e.getResponseBodyAsString());
        }

        return weatherList;
    }
    private String convertAreaToCity(String area) {
        return switch (area) {
            case "ÏÑúÏö∏" -> "Seoul";
            case "Í≤ΩÍ∏∞" -> "Suwon";
            case "Î∂ÄÏÇ∞" -> "Busan";
            case "Ïù∏Ï≤ú" -> "Incheon";
            case "ÎåÄÏ†Ñ" -> "Daejeon";
            case "ÎåÄÍµ¨" -> "Daegu";
            case "Í¥ëÏ£º" -> "Gwangju";
            case "Ïö∏ÏÇ∞" -> "Ulsan";
            case "Ï†úÏ£º" -> "Jeju";
            case "ÏÑ∏Ï¢Ö" -> "Sejong";
            case "Í∞ïÏõêÎèÑ" -> "Gangneung";
            case "Ï∂©Ï≤≠Î∂ÅÎèÑ" -> "Cheongju";
            case "Ï∂©Ï≤≠ÎÇ®ÎèÑ" -> "Cheonan";
            case "Í≤ΩÏÉÅÎ∂ÅÎèÑ" -> "Pohang";
            case "Í≤ΩÏÉÅÎÇ®ÎèÑ" -> "Changwon";
            case "Ï†ÑÎùºÎ∂ÅÎèÑ" -> "Jeonju";
            case "Ï†ÑÎùºÎÇ®ÎèÑ" -> "Yeosu";
            default -> "Seoul";
        };
    }
}